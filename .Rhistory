glimpse()
response_json <-
response |>
httr2::resp_body_json() |>
pluck('observations') |>
glimpse()
response_json <-
response |>
httr2::resp_body_json() |>
pluck('observations', 'value') |>
glimpse()
response_json <-
response |>
httr2::resp_body_json() |>
pluck('observations') |>
map_dfr(
\(x) {
tibble(
date = x |> pluck('date'),
value = x |> pluck('value')
)
}
)
View(response_json)
glimpse()
response_json <-
response |>
httr2::resp_body_json() |>
pluck('observations') |>
map_dfr(
\(x) {
tibble(
date = x |> pluck('date'),
value = x |> pluck('value')
)
}
) |>
glimpse()
get_fred_series <- function(base_url, seriesID, start, end, units, api_key) {
# Construct the request
response <- httr2::request(base_url) |>
httr2::req_url_query(
series_id = seriesID,
api_key = api_key,
file_type = "json",
observation_start = start,
observation_end = end,
units = units
) |>
httr2::req_perform()
# Check if request was successful
if (httr2::resp_status(response) == 200) {
response_json <-
response |>
httr2::resp_body_json() |>
pluck('observations') |>
map_dfr(
\(x) {
tibble(
date = x |> pluck('date'),
value = x |> pluck('value')
)
}
)
return(response_json)
} else {
# Message if API call is unsuccessful
message("Request failed with status: ", httr2::resp_status(response))
return(NULL)
}
}
seriesID <- "DFF"
start <- "2020-01-01"
end <- "2023-01-01"
units <- "lin"
api_key <- fred_api
dff_data <- get_fred_series(
seriesID,
start,
end,
units,
api_key)
dff_data <- get_fred_series(
seriesID,
start,
end,
units,
fred_api)
dff_data <- get_fred_series(
seriesID,
start,
end,
units,
api_key)
api_key
dff_data <- get_fred_series(
seriesID,
start,
end,
units,
api_key)
dff_data <- get_fred_series(
seriesID,
start,
end,
units,
api_key = fred_api)
api_key <- fred_api
api_key <- api_key
dff_data <- get_fred_series(
seriesID,
start,
end,
units,
api_key)
api_key
get_fred_series <- function(seriesID, start, end, units, api_key) {
# Construct the request
response <- httr2::request(base_url) |>
httr2::req_url_query(
series_id = seriesID,
api_key = api_key,
file_type = "json",
observation_start = start,
observation_end = end,
units = units
) |>
httr2::req_perform()
# Check if request was successful
if (httr2::resp_status(response) == 200) {
response_json <-
response |>
httr2::resp_body_json() |>
pluck('observations') |>
map_dfr(
\(x) {
tibble(
date = x |> pluck('date'),
value = x |> pluck('value')
)
}
)
return(response_json)
} else {
# Message if API call is unsuccessful
message("Request failed with status: ", httr2::resp_status(response))
return(NULL)
}
}
seriesID <- "DFF"
start <- "2020-01-01"
end <- "2023-01-01"
units <- "lin"
api_key <- api_key
dff_data <- get_fred_series(
"DFF",
"2020-01-01",
"2023-01-01",
"lin",
"bef39583529aa2bca88a1f4a54aba4d7")
View(dff_data)
source("~/Documents/Projects/GitHub-Projects/Econ-Data-APIs/FRED/scripts/fred-api.R")
json_file <- jsonlite::fromJSON("FRED/secrets.json")
fred_api <- json_file$api_key
get_fred_series <- function(seriesID, start, end, units, api_key) {
base_url <- "https://api.stlouisfed.org/fred/series/observations"
# Construct the request
response <- httr2::request(base_url) |>
httr2::req_url_query(
series_id = seriesID,
api_key = api_key,
file_type = "json",
observation_start = start,
observation_end = end,
units = units
) |>
httr2::req_perform()
# Check if request was successful
if (httr2::resp_status(response) == 200) {
response_json <-
response |>
httr2::resp_body_json() |>
pluck('observations') |>
map_dfr(
\(x) {
tibble(
date = x |> pluck('date'),
value = x |> pluck('value')
)
}
)
return(response_json)
} else {
# Message if API call is unsuccessful
message("Request failed with status: ", httr2::resp_status(response))
return(NULL)
}
}
dff_data <- get_fred_series(
"DFF",
"2020-01-01",
"2023-01-01",
"lin",
fred_api)
View(dff_data)
source("../scripts/fred-api.R")
source("../scripts/fred-api.R")
#| include: true
#| echo: false
#| label: functions
# get an api key from the fred website
json_file <- jsonlite::fromJSON("FRED/secrets.json")
#| include: true
#| echo: false
#| label: functions
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../FRED/secrets.json")
#| include: true
#| echo: false
#| label: functions
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
View(get_fred_series)
get_fred_series()
get_fred_series
get_fred_series
fed_funds_df <-
get_fred_series(
"DFF",
"2000-01-01",
"2024-11-01",
"lin",
fred_api)
View(fed_funds_df)
renv::snapshot()
source("00_packages.R")
source("FRED/scripts/00_packages.R")
#| include: true
#| echo: false
#| label: functions
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| include: true
#| echo: false
#| label: functions
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| echo: false
#| include: true
#| label: setup
#| warning: false
library(httr2)
library(rmarkdown)
source("../scripts/fred-api.R")
source("/scripts/fred-api.R")
source("/scripts/fred-api.R")
source("FRED/scripts/fred-api.R")
source("../scripts/fred-api.R")
#| include: true
#| echo: false
#| label: functions
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
source("../../scripts/fred-api.R")
source("../scripts/fred-api.R")
source("../scripts/fred-api.R")
source("~/Documents/Projects/GitHub-Projects/Econ-Data-APIs/FRED/scripts/fred-api.R")
source("~/Documents/Projects/GitHub-Projects/Econ-Data-APIs/FRED/scripts/fred-api.R")
source("~/Documents/Projects/GitHub-Projects/Econ-Data-APIs/FRED/scripts/fred-api.R")
#| include: false
#| echo: false
#| warning: false
#| label: functions
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| include: true
#| warning: false
#| echo: false
#| label: use-function
fed_funds_df <-
get_fred_series(
"DFF",
"2000-01-01",
"2024-11-01",
"lin",
fred_api)
fed_funds_df
TR_rate_dff <-
get_fred_series(
"T10YFF",
"2000-01-01",
"2024-11-01",
fed_api
)
fed_funds_df
TR_rate_dff <-
get_fred_series(
"T10YFF",
"2000-01-01",
"2024-11-01",
fed_api
)
#| include: false
#| echo: false
#| warning: false
#| label: import-function
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| include: true
#| warning: false
#| echo: false
#| label: use-function
fed_funds_df <-
get_fred_series(
"DFF",
"2000-01-01",
"2024-11-01",
"lin",
fred_api)
TR_rate_dff <-
get_fred_series(
"T10YFF",
"2000-01-01",
"2024-11-01",
"lin",
fed_api
)
TR_rate_dff <-
get_fred_series(
"T10YFF",
"2000-01-01",
"2024-11-01",
"lin",
fred_api
)
View(TR_rate_dff)
#| include: false
#| echo: false
#| warning: false
#| label: import-function
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| include: true
#| warning: false
#| echo: false
#| label: use-function
fed_funds_df <-
get_fred_series(
"DFF",
"2000-01-01",
"2024-11-01",
"lin",
fred_api)
TR_rate_dff <-
get_fred_series(
"T10YFF",
"2000-01-01",
"2024-11-01",
"lin",
fred_api
)
fed_funds_df
TR_rate_dff
View(fed_funds_df)
View(TR_rate_dff)
#| include: false
#| echo: false
#| warning: false
#| label: import-function
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| label: multiple-series
#| include: true
#| warning: false
#| echo: false
more_series <-
get_more_series(
c("DFF", "T10YFF", "DCOILBRENTEU"),
"2000-01-01",
"2024-11-01",
"lin",
fred_api)
more_series
View(more_series)
more_series <-
more_series |>
dplyr::mutate(
date = lubridate::as_date(date)
)
#| echo: false
#| include: true
#| label: setup
#| warning: false
library(httr2)
library(rmarkdown)
#| include: false
#| echo: false
#| warning: false
#| label: import-function
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| include: false
#| echo: false
#| warning: false
#| label: import-function
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| include: false
#| echo: false
#| warning: false
#| label: import-function
# get an api key from the fred website
json_file <- jsonlite::fromJSON("../secrets.json")
fred_api <- json_file$api_key
source("../scripts/fred-api.R")
#| include: true
#| warning: false
#| echo: false
#| label: use-function
fed_funds_df <-
get_fred_series(
"DFF",
"2000-01-01",
"2024-11-01",
"lin",
fred_api)
TR_rate_dff <-
get_fred_series(
"T10YFF",
"2000-01-01",
"2024-11-01",
"lin",
fred_api
)
fed_funds_df
TR_rate_dff
#| label: multiple-series
#| include: true
#| warning: false
#| echo: false
more_series <-
get_more_series(
c("DFF", "T10YFF", "DCOILBRENTEU"),
"2000-01-01",
"2024-11-01",
"lin",
fred_api)
more_series
# from here we can perform requisite data cleaning
more_series <-
more_series |>
dplyr::mutate(
date = lubridate::as_date(date),
)
View(more_series)
more_series
fig1 <- more_series |>
ggplot2::ggplot(aes(x = date)) +
geom_line(y = DFF)
fig1 <- more_series |>
ggplot2::ggplot(aes(x = date))
fig1
fig1 <- more_series |>
ggplot2::ggplot(aes(x = date)) +
geom_line(aes(y = DFF))
fig1
fig1 <- more_series |>
ggplot2::ggplot(aes(x = date)) +
geom_line(aes(y = DFF)) +
geom_point(aes(y = T10YFF))
fig1
fig1 <- more_series |>
ggplot2::ggplot(aes(x = date)) +
geom_line(aes(y = DFF)) +
geom_abline(aes(y = T10YFF))
fig1
fig1 <- more_series |>
ggplot2::ggplot(aes(x = date)) +
geom_line(aes(y = DFF)) +
geom_line(aes(y = T10YFF))
fig1
fig1 <- more_series |>
ggplot2::ggplot(aes(x = date)) +
geom_line(aes(y = DFF)) +
geom_line(aes(y = T10YFF), linetype = "dashed")
fig1
fig1 <- more_series |>
ggplot2::ggplot(aes(x = date)) +
geom_line(aes(y = DFF)) +
geom_line(aes(y = T10YFF),
linetype = "dashed",
color = "red")
fig1
fig1 + theme_bw()
